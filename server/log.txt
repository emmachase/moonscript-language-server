'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Starting Language Server'
'Starting Language Server'
'Starting Language Server'
'Starting Language Server'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1219328,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1222216,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Hello, world!'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14758'
'Saw line '
'Got empty line, breaking'
'14758'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14760'
'Saw line '
'Got empty line, breaking'
'14760'
{ 
  capabilities = { 
    general = { 
      markdown = { 
        parser = 'marked',
        version = '1.1.0' 
      },
      positionEncodings = { 'utf-16' },
      regularExpressions = { 
        engine = 'ECMAScript',
        version = 'ES2020' 
      },
      staleRequestSupport = { 
        cancel = true,
        retryOnContentModified = { 'textDocument/semanticTokens/full', 
          'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
      } 
    },
    notebookDocument = { 
      synchronization = { 
        dynamicRegistration = true,
        executionSummarySupport = true 
      } 
    },
    textDocument = { 
      callHierarchy = { 
        dynamicRegistration = true 
      },
      codeAction = { 
        codeActionLiteralSupport = { 
          codeActionKind = { 
            valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
              'refactor.rewrite', 'source', 'source.organizeImports' } 
          } 
        },
        dataSupport = true,
        disabledSupport = true,
        dynamicRegistration = true,
        honorsChangeAnnotations = false,
        isPreferredSupport = true,
        resolveSupport = { 
          properties = { 'edit' } 
        } 
      },
      codeLens = { 
        dynamicRegistration = true 
      },
      colorProvider = { 
        dynamicRegistration = true 
      },
      completion = { 
        completionItem = { 
          commitCharactersSupport = true,
          deprecatedSupport = true,
          documentationFormat = { 'markdown', 'plaintext' },
          insertReplaceSupport = true,
          insertTextModeSupport = { 
            valueSet = { 1, 2 } 
          },
          labelDetailsSupport = true,
          preselectSupport = true,
          resolveSupport = { 
            properties = { 'documentation', 'detail', 'additionalTextEdits' } 
          },
          snippetSupport = true,
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        completionItemKind = { 
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
            20, 21, 22, 23, 24, 25 } 
        },
        completionList = { 
          itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
            'insertTextMode' } 
        },
        contextSupport = true,
        dynamicRegistration = true,
        insertTextMode = 2 
      },
      declaration = { 
        dynamicRegistration = true,
        linkSupport = true 
      },
      definition = { 
        dynamicRegistration = true,
        linkSupport = true 
      },
      diagnostic = { 
        dynamicRegistration = true,
        relatedDocumentSupport = false 
      },
      documentHighlight = { 
        dynamicRegistration = true 
      },
      documentLink = { 
        dynamicRegistration = true,
        tooltipSupport = true 
      },
      documentSymbol = { 
        dynamicRegistration = true,
        hierarchicalDocumentSymbolSupport = true,
        labelSupport = true,
        symbolKind = { 
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
            20, 21, 22, 23, 24, 25, 26 } 
        },
        tagSupport = { 
          valueSet = { 1 } 
        } 
      },
      foldingRange = { 
        dynamicRegistration = true,
        foldingRange = { 
          collapsedText = false 
        },
        foldingRangeKind = { 
          valueSet = { 'comment', 'imports', 'region' } 
        },
        lineFoldingOnly = true,
        rangeLimit = 5000 
      },
      formatting = { 
        dynamicRegistration = true 
      },
      hover = { 
        contentFormat = { 'markdown', 'plaintext' },
        dynamicRegistration = true 
      },
      implementation = { 
        dynamicRegistration = true,
        linkSupport = true 
      },
      inlayHint = { 
        dynamicRegistration = true,
        resolveSupport = { 
          properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
            'label.command' } 
        } 
      },
      inlineValue = { 
        dynamicRegistration = true 
      },
      linkedEditingRange = { 
        dynamicRegistration = true 
      },
      onTypeFormatting = { 
        dynamicRegistration = true 
      },
      publishDiagnostics = { 
        codeDescriptionSupport = true,
        dataSupport = true,
        relatedInformation = true,
        tagSupport = { 
          valueSet = { 1, 2 } 
        },
        versionSupport = false 
      },
      rangeFormatting = { 
        dynamicRegistration = true 
      },
      references = { 
        dynamicRegistration = true 
      },
      rename = { 
        dynamicRegistration = true,
        honorsChangeAnnotations = true,
        prepareSupport = true,
        prepareSupportDefaultBehavior = 1 
      },
      selectionRange = { 
        dynamicRegistration = true 
      },
      semanticTokens = { 
        augmentsSyntaxTokens = true,
        dynamicRegistration = true,
        formats = { 'relative' },
        multilineTokenSupport = false,
        overlappingTokenSupport = false,
        requests = { 
          full = { 
            delta = true 
          },
          range = true 
        },
        serverCancelSupport = true,
        tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
          'deprecated', 'abstract', 'async', 'modification', 'documentation', 
          'defaultLibrary' },
        tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
          'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
          'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
          'number', 'regexp', 'operator', 'decorator' } 
      },
      signatureHelp = { 
        contextSupport = true,
        dynamicRegistration = true,
        signatureInformation = { 
          activeParameterSupport = true,
          documentationFormat = { 'markdown', 'plaintext' },
          parameterInformation = { 
            labelOffsetSupport = true 
          } 
        } 
      },
      synchronization = { 
        didSave = true,
        dynamicRegistration = true,
        willSave = true,
        willSaveWaitUntil = true 
      },
      typeDefinition = { 
        dynamicRegistration = true,
        linkSupport = true 
      },
      typeHierarchy = { 
        dynamicRegistration = true 
      } 
    },
    window = { 
      showDocument = { 
        support = true 
      },
      showMessage = { 
        messageActionItem = { 
          additionalPropertiesSupport = true 
        } 
      },
      workDoneProgress = true 
    },
    workspace = { 
      applyEdit = true,
      codeLens = { 
        refreshSupport = true 
      },
      configuration = true,
      diagnostics = { 
        refreshSupport = true 
      },
      didChangeConfiguration = { 
        dynamicRegistration = true 
      },
      didChangeWatchedFiles = { 
        dynamicRegistration = true,
        relativePatternSupport = true 
      },
      executeCommand = { 
        dynamicRegistration = true 
      },
      fileOperations = { 
        didCreate = true,
        didDelete = true,
        didRename = true,
        dynamicRegistration = true,
        willCreate = true,
        willDelete = true,
        willRename = true 
      },
      inlayHint = { 
        refreshSupport = true 
      },
      inlineValue = { 
        refreshSupport = true 
      },
      semanticTokens = { 
        refreshSupport = true 
      },
      symbol = { 
        dynamicRegistration = true,
        resolveSupport = { 
          properties = { 'location.range' } 
        },
        symbolKind = { 
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
            20, 21, 22, 23, 24, 25, 26 } 
        },
        tagSupport = { 
          valueSet = { 1 } 
        } 
      },
      workspaceEdit = { 
        changeAnnotationSupport = { 
          groupsOnLabel = true 
        },
        documentChanges = true,
        failureHandling = 'textOnlyTransactional',
        normalizesLineEndings = true,
        resourceOperations = { 'create', 'rename', 'delete' } 
      },
      workspaceFolders = true 
    } 
  },
  clientInfo = { 
    name = 'Visual Studio Code',
    version = '1.74.2' 
  },
  locale = 'en-us',
  processId = 1198116,
  rootPath = 'c:\\Users\\me',
  rootUri = 'file:///c%3A/Users/me',
  trace = 'verbose',
  workspaceFolders = { { 
      name = 'me',
      uri = 'file:///c%3A/Users/me' 
    } } 
}
'Sending response'

[[Content-Length: 76\r\n\r\n{\"jsonrpc\":\"2.0\",\"error\":{\"message\":\"Method
 'nil' Not Found\",\"code\":-32601}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14760'
'Saw line '
'Got empty line, breaking'
'14760'
{ 
  capabilities = { 
    general = { 
      markdown = { 
        parser = 'marked',
        version = '1.1.0' 
      },
      positionEncodings = { 'utf-16' },
      regularExpressions = { 
        engine = 'ECMAScript',
        version = 'ES2020' 
      },
      staleRequestSupport = { 
        cancel = true,
        retryOnContentModified = { 'textDocument/semanticTokens/full', 
          'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
      } 
    },
    notebookDocument = { 
      synchronization = { 
        dynamicRegistration = true,
        executionSummarySupport = true 
      } 
    },
    textDocument = { 
      callHierarchy = { 
        dynamicRegistration = true 
      },
      codeAction = { 
        codeActionLiteralSupport = { 
          codeActionKind = { 
            valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
              'refactor.rewrite', 'source', 'source.organizeImports' } 
          } 
        },
        dataSupport = true,
        disabledSupport = true,
        dynamicRegistration = true,
        honorsChangeAnnotations = false,
        isPreferredSupport = true,
        resolveSupport = { 
          properties = { 'edit' } 
        } 
      },
      codeLens = { 
        dynamicRegistration = true 
      },
      colorProvider = { 
        dynamicRegistration = true 
      },
      completion = { 
        completionItem = { 
          commitCharactersSupport = true,
          deprecatedSupport = true,
          documentationFormat = { 'markdown', 'plaintext' },
          insertReplaceSupport = true,
          insertTextModeSupport = { 
            valueSet = { 1, 2 } 
          },
          labelDetailsSupport = true,
          preselectSupport = true,
          resolveSupport = { 
            properties = { 'documentation', 'detail', 'additionalTextEdits' } 
          },
          snippetSupport = true,
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        completionItemKind = { 
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
            20, 21, 22, 23, 24, 25 } 
        },
        completionList = { 
          itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
            'insertTextMode' } 
        },
        contextSupport = true,
        dynamicRegistration = true,
        insertTextMode = 2 
      },
      declaration = { 
        dynamicRegistration = true,
        linkSupport = true 
      },
      definition = { 
        dynamicRegistration = true,
        linkSupport = true 
      },
      diagnostic = { 
        dynamicRegistration = true,
        relatedDocumentSupport = false 
      },
      documentHighlight = { 
        dynamicRegistration = true 
      },
      documentLink = { 
        dynamicRegistration = true,
        tooltipSupport = true 
      },
      documentSymbol = { 
        dynamicRegistration = true,
        hierarchicalDocumentSymbolSupport = true,
        labelSupport = true,
        symbolKind = { 
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
            20, 21, 22, 23, 24, 25, 26 } 
        },
        tagSupport = { 
          valueSet = { 1 } 
        } 
      },
      foldingRange = { 
        dynamicRegistration = true,
        foldingRange = { 
          collapsedText = false 
        },
        foldingRangeKind = { 
          valueSet = { 'comment', 'imports', 'region' } 
        },
        lineFoldingOnly = true,
        rangeLimit = 5000 
      },
      formatting = { 
        dynamicRegistration = true 
      },
      hover = { 
        contentFormat = { 'markdown', 'plaintext' },
        dynamicRegistration = true 
      },
      implementation = { 
        dynamicRegistration = true,
        linkSupport = true 
      },
      inlayHint = { 
        dynamicRegistration = true,
        resolveSupport = { 
          properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
            'label.command' } 
        } 
      },
      inlineValue = { 
        dynamicRegistration = true 
      },
      linkedEditingRange = { 
        dynamicRegistration = true 
      },
      onTypeFormatting = { 
        dynamicRegistration = true 
      },
      publishDiagnostics = { 
        codeDescriptionSupport = true,
        dataSupport = true,
        relatedInformation = true,
        tagSupport = { 
          valueSet = { 1, 2 } 
        },
        versionSupport = false 
      },
      rangeFormatting = { 
        dynamicRegistration = true 
      },
      references = { 
        dynamicRegistration = true 
      },
      rename = { 
        dynamicRegistration = true,
        honorsChangeAnnotations = true,
        prepareSupport = true,
        prepareSupportDefaultBehavior = 1 
      },
      selectionRange = { 
        dynamicRegistration = true 
      },
      semanticTokens = { 
        augmentsSyntaxTokens = true,
        dynamicRegistration = true,
        formats = { 'relative' },
        multilineTokenSupport = false,
        overlappingTokenSupport = false,
        requests = { 
          full = { 
            delta = true 
          },
          range = true 
        },
        serverCancelSupport = true,
        tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
          'deprecated', 'abstract', 'async', 'modification', 'documentation', 
          'defaultLibrary' },
        tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
          'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
          'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
          'number', 'regexp', 'operator', 'decorator' } 
      },
      signatureHelp = { 
        contextSupport = true,
        dynamicRegistration = true,
        signatureInformation = { 
          activeParameterSupport = true,
          documentationFormat = { 'markdown', 'plaintext' },
          parameterInformation = { 
            labelOffsetSupport = true 
          } 
        } 
      },
      synchronization = { 
        didSave = true,
        dynamicRegistration = true,
        willSave = true,
        willSaveWaitUntil = true 
      },
      typeDefinition = { 
        dynamicRegistration = true,
        linkSupport = true 
      },
      typeHierarchy = { 
        dynamicRegistration = true 
      } 
    },
    window = { 
      showDocument = { 
        support = true 
      },
      showMessage = { 
        messageActionItem = { 
          additionalPropertiesSupport = true 
        } 
      },
      workDoneProgress = true 
    },
    workspace = { 
      applyEdit = true,
      codeLens = { 
        refreshSupport = true 
      },
      configuration = true,
      diagnostics = { 
        refreshSupport = true 
      },
      didChangeConfiguration = { 
        dynamicRegistration = true 
      },
      didChangeWatchedFiles = { 
        dynamicRegistration = true,
        relativePatternSupport = true 
      },
      executeCommand = { 
        dynamicRegistration = true 
      },
      fileOperations = { 
        didCreate = true,
        didDelete = true,
        didRename = true,
        dynamicRegistration = true,
        willCreate = true,
        willDelete = true,
        willRename = true 
      },
      inlayHint = { 
        refreshSupport = true 
      },
      inlineValue = { 
        refreshSupport = true 
      },
      semanticTokens = { 
        refreshSupport = true 
      },
      symbol = { 
        dynamicRegistration = true,
        resolveSupport = { 
          properties = { 'location.range' } 
        },
        symbolKind = { 
          valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
            20, 21, 22, 23, 24, 25, 26 } 
        },
        tagSupport = { 
          valueSet = { 1 } 
        } 
      },
      workspaceEdit = { 
        changeAnnotationSupport = { 
          groupsOnLabel = true 
        },
        documentChanges = true,
        failureHandling = 'textOnlyTransactional',
        normalizesLineEndings = true,
        resourceOperations = { 'create', 'rename', 'delete' } 
      },
      workspaceFolders = true 
    } 
  },
  clientInfo = { 
    name = 'Visual Studio Code',
    version = '1.74.2' 
  },
  locale = 'en-us',
  processId = 1198116,
  rootPath = 'c:\\Users\\me',
  rootUri = 'file:///c%3A/Users/me',
  trace = 'verbose',
  workspaceFolders = { { 
      name = 'me',
      uri = 'file:///c%3A/Users/me' 
    } } 
}
'Sending response'

[[Content-Length: 76\r\n\r\n{\"jsonrpc\":\"2.0\",\"error\":{\"message\":\"Method
 'nil' Not Found\",\"code\":-32601}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14803'
'Saw line '
'Got empty line, breaking'
'14803'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"serverInfo":{"name":"Moonscript 
Language Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}fewae\n
]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}fewae\n
]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}fewae\n
]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}\n]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1227608,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Sending response'

[[Content-Length: 76\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"jsonrpc\":\"2.0\"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 76\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"jsonrpc\":\"2.0\"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"jsonrpc\":\"2.0\",\"id\":1}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1209284,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Sending response'

[[Content-Length: 76\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"jsonrpc\":\"2.0\"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 76\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"jsonrpc\":\"2.0\"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-3
2601,\"message\":\"Method 'nil' Not Found\"}}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1232368,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Sending response'

[[Content-Length: 76\r\n\r\n{\"error\":{\"message\":\"Method 'nil' Not Found\",\
"code\":-32601},\"jsonrpc\":\"2.0\"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 76\r\n\r\n{\"error\":{\"message\":\"Method 'nil' Not Found\",\
"code\":-32601},\"jsonrpc\":\"2.0\"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"error\":{\"message\":\"Method 'nil' Not 
Found\",\"code\":-32601},\"jsonrpc\":\"2.0\"}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1231008,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}\n]]

[[Content-Length: 287\r\n\r\n{"jsonrpc":"2.0","params":{"uri":"file:///c%3A/User
s/me/Downloads/test%20TEST%20test.moon","diagnostics":[{"message":"test","range"
:{"end":{"line":0,"character":5},"start":{"line":0,"character":0}},"severity":1,
"code":"test","source":"test"}]},"method":"textDocument/publishDiagnostics"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Sending response'

[[Content-Length: 76\r\n\r\n{\"jsonrpc\":\"2.0\",\"error\":{\"message\":\"Method
 'nil' Not Found\",\"code\":-32601}}\n]]

[[Content-Length: 287\r\n\r\n{"jsonrpc":"2.0","params":{"uri":"file:///c%3A/User
s/me/Downloads/test%20TEST%20test.moon","diagnostics":[{"message":"test","range"
:{"end":{"line":0,"character":5},"start":{"line":0,"character":0}},"severity":1,
"code":"test","source":"test"}]},"method":"textDocument/publishDiagnostics"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 76\r\n\r\n{\"jsonrpc\":\"2.0\",\"error\":{\"message\":\"Method
 'nil' Not Found\",\"code\":-32601}}\n]]

[[Content-Length: 287\r\n\r\n{"jsonrpc":"2.0","params":{"uri":"file:///c%3A/User
s/me/Downloads/test%20TEST%20test.moon","diagnostics":[{"message":"test","range"
:{"end":{"line":0,"character":5},"start":{"line":0,"character":0}},"severity":1,
"code":"test","source":"test"}]},"method":"textDocument/publishDiagnostics"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}\n]]

[[Content-Length: 287\r\n\r\n{"jsonrpc":"2.0","params":{"uri":"file:///c%3A/User
s/me/Downloads/test%20TEST%20test.moon","diagnostics":[{"message":"test","range"
:{"end":{"line":0,"character":5},"start":{"line":0,"character":0}},"severity":1,
"code":"test","source":"test"}]},"method":"textDocument/publishDiagnostics"}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1226912,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}\n]]

[[Content-Length: 287\r\n\r\n{"jsonrpc":"2.0","params":{"diagnostics":[{"source"
:"test","message":"test","range":{"end":{"character":5,"line":0},"start":{"chara
cter":0,"line":0}},"severity":1,"code":"test"}],"uri":"file:///c%3A/Users/me/Dow
nloads/test%20TEST%20test.moon"},"method":"textDocument/publishDiagnostics"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1226912,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}\n]]

[[Content-Length: 287\r\n\r\n{"params":{"diagnostics":[{"code":"test","source":"
test","message":"test","range":{"start":{"character":0,"line":0},"end":{"charact
er":5,"line":0}},"severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TE
ST%20test.moon"},"method":"textDocument/publishDiagnostics","jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1226912,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}\n]]

[[Content-Length: 287\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"severity":1,"code":"test","source":"tes
t","message":"test","range":{"end":{"line":0,"character":5},"start":{"line":0,"c
haracter":0}}}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1233284,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}\n]]

[[Content-Length: 287\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":5,"line":0},"start":{"character":0,"line":0}},"severity":1,"code":"test","so
urce":"test","message":"test"}],"uri":"file:///c%3A/Users/me/Downloads/test%20TE
ST%20test.moon"},"method":"textDocument/publishDiagnostics","jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1230108,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}\n]]
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1230108,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}\n]]
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1230108,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}\n]]
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1232804,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 287\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":5,"line":0},"start":{"character":0,"line":0}},"severity":1,"code":"test","so
urce":"test","message":"test"}],"uri":"file:///c%3A/Users/me/Downloads/test%20TE
ST%20test.moon"},"method":"textDocument/publishDiagnostics","jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"jsonrpc\":\"2.0\",\"id\":1}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1232260,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}\n]]

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"severity":1,"code":"test","source":"test","message":"test","
range":{"start":{"character":0,"line":0},"end":{"character":5,"line":0}}}],"uri"
:"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-3
2601,\"message\":\"Method 'nil' Not Found\"}}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1235584,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"severity":1,"code":"test","source":"test","message":"test","
range":{"start":{"line":0,"character":0},"end":{"line":0,"character":5}}}]}}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1232292,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 288\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"severity":1,"code":"test","source":"tes
t","message":"test","range":{"start":{"line":0,"character":0},"end":{"line":0,"c
haracter":5}}}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"jsonrpc\":\"2.0\",\"error\":{\"message\":\"Method
 'nil' Not Found\",\"code\":-32601},\"id\":1}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1233704,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 126\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1236472,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 126\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1235944,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 288\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"severity":1,"code":"test","source":"tes
t","message":"test","range":{"start":{"line":0,"character":0},"end":{"line":0,"c
haracter":5}}}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"id\":1,\"error\":{\"message\":\"Method 'nil' Not 
Found\",\"code\":-32601},\"jsonrpc\":\"2.0\"}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1236748,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 288\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","range":{"start":{"line":0,"
character":0},"end":{"line":0,"character":5}},"severity":1,"code":"test"}]}}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfe' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 210'
'Saw line '
'Got empty line, breaking'
'210'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfew' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfewq' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"jsonrpc\":\"2.0\",\"error\":{\"message\":\"Method
 'nil' Not Found\",\"code\":-32601},\"id\":1}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1239928,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 288\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"severity":1,"code":"test","source":"test","message":"test","
range":{"start":{"line":0,"character":0},"end":{"line":0,"character":5}}}]}}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfa' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 210'
'Saw line '
'Got empty line, breaking'
'210'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfas' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfasd' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 212'
'Saw line '
'Got empty line, breaking'
'212'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfasdf' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfasdfasdf' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 9 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1237488,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfd' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}\n]]

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1233608,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfa' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"error\":{\"message\":\"Method 'nil' Not Found\",\
"code\":-32601},\"id\":1,\"jsonrpc\":\"2.0\"}\n]]

[[Content-Length: 274\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1238476,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfa' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 210'
'Saw line '
'Got empty line, breaking'
'210'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfae' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfaew' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 212'
'Saw line '
'Got empty line, breaking'
'212'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfaewq' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfaewqc' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 6 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 214'
'Saw line '
'Got empty line, breaking'
'214'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfaewqce' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 7 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"error\":{\"message\":\"Method 'nil' Not 
Found\",\"code\":-32601},\"jsonrpc\":\"2.0\"}\r\n]]

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1238844,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfz' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}\r\n]]

[[Content-Length: 273\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1233456,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}\r\n\r\
n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfs' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfssa' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 210'
'Saw line '
'Got empty line, breaking'
'210'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfss' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfs' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 6 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 208'
'Saw line '
'Got empty line, breaking'
'208'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 7 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 207'
'Saw line '
'Got empty line, breaking'
'207'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 8 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 208'
'Saw line '
'Got empty line, breaking'
'208'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nz' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 9 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 210'
'Saw line '
'Got empty line, breaking'
'210'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nzx' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 10 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nzxc' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 11 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"jsonrpc\":\"2.0\",\"id\":1}\r\n\r\n]]

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n\r\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1220916,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"serverInfo":{"name":"Moonscript 
Language Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfg' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 210'
'Saw line '
'Got empty line, breaking'
'210'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfge' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfgea' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 212'
'Saw line '
'Got empty line, breaking'
'212'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfgead' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"error\":{\"message\":\"Method 'nil' Not 
Found\",\"code\":-32601},\"jsonrpc\":\"2.0\"}\r\n]]

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1233568,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 273\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfg' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 210'
'Saw line '
'Got empty line, breaking'
'210'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfge' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfgee' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}\r\n]]

[[Content-Length: 273\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"start
":{"line":0,"character":0},"end":{"line":0,"character":4}}}]}}\r\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1241792,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-3
2601,\"message\":\"Method 'nil' Not Found\"}}\r\n]]

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"end":{"character":4,"
line":0},"start":{"character":0,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1241756,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"method":"textDocument/publishDiagnostics","jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"method":"textDocument/publishDiagnostics","jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfg' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"method":"textDocument/publishDiagnostics","jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 210'
'Saw line '
'Got empty line, breaking'
'210'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfge' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"method":"textDocument/publishDiagnostics","jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}\r\n]]

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"method":"textDocument/publishDiagnostics","jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1240640,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 126\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}\r\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1241148,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 273\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"severity":1,"range":{"end":{"line":0,"c
haracter":4},"start":{"line":0,"character":0}},"source":"test","message":"test"}
]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"severity":1,"range":{"end":{"line":0,"c
haracter":4},"start":{"line":0,"character":0}},"source":"test","message":"test"}
]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}\r\n]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"code\":-3
2601,\"message\":\"Method 'nil' Not Found\"}}\r\n]]

[[Content-Length: 273\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"severity":1,"range":{"end":{"line":0,"c
haracter":4},"start":{"line":0,"character":0}},"source":"test","message":"test"}
]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}\r\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1243712,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}\r\n]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1242956,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"serverInfo":{"name":"Moonscript 
Language Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"serverInfo":{"name":"Moonscript 
Language Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"serverInfo":{"name":"Moonscript 
Language Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1206900,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"jsonrpc\":\"2.0\",\"id\":1}]]

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1248116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"start":{"character":0
,"line":0},"end":{"character":4,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"start":{"character":0
,"line":0},"end":{"character":4,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-3
2601,\"message\":\"Method 'nil' Not Found\"}}]]

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"start":{"character":0
,"line":0},"end":{"character":4,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1247256,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"jsonrpc\":\"2.0\",\"id\":1}]]

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1246728,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"start":{"line":0,"character":0},"end":{"line":0,"chara
cter":4}},"source":"test","message":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"start":{"line":0,"character":0},"end":{"line":0,"chara
cter":4}},"source":"test","message":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"code\":-3
2601,\"message\":\"Method 'nil' Not Found\"}}]]

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"start":{"line":0,"character":0},"end":{"line":0,"chara
cter":4}},"source":"test","message":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1247936,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 212'
'Saw line '
'Got empty line, breaking'
'212'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 212'
'Saw line '
'Got empty line, breaking'
'212'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\ne' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 212'
'Saw line '
'Got empty line, breaking'
'212'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 6 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\ne' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 7 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 212'
'Saw line '
'Got empty line, breaking'
'212'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 8 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\ne' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 9 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 10 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 18 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 19 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 20 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}]]

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1249004,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1249004,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1248996,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nff' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"id\":1,\"jsonrpc\":\"2.0\"}]]

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1248176,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}]]

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"end":{"charact
er":4,"line":0},"start":{"character":0,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1251236,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfd' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}]]

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1249516,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-3
2601,\"message\":\"Method 'nil' Not Found\"}}]]

[[Content-Length: 274\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1249228,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"start":{"character":0
,"line":0},"end":{"character":4,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nfw' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 274\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"start":{"character":0
,"line":0},"end":{"character":4,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1250616,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"serverInfo":{"name":"Moonscript 
Language Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"serverInfo":{"name":"Moonscript 
Language Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n {"id":0,"result":{"capabilities":{"textDocumentSyn
c":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n {"id":0,"result":{"serverInfo":{"name":"Moonscript
 Language Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1248176,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n {"id":0,"jsonrpc":"2.0","result":{"capabilities":{
"textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 209'
'Saw line '
'Got empty line, breaking'
'209'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 208'
'Saw line '
'Got empty line, breaking'
'208'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 212'
'Saw line '
'Got empty line, breaking'
'212'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n {\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"message\
":\"Method 'nil' Not Found\",\"code\":-32601}}]]

[[Content-Length: 273\r\n\r\n{"params":{"diagnostics":[{"range":{"start":{"chara
cter":0,"line":0},"end":{"character":4,"line":0}},"source":"test","message":"tes
t","severity":1}],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon
"},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1258912,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n {"jsonrpc":"2.0","id":0,"result":{"serverInfo":{"n
ame":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"start":{"character":0
,"line":0},"end":{"character":4,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n {"result":{"serverInfo":{"name":"Moonscript Langua
ge Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n {"jsonrpc":"2.0","result":{"capabilities":{"textDo
cumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n {"result":{"capabilities":{"textDocumentSync":1},"
serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n {"jsonrpc":"2.0","id":0,"result":{"capabilities":{
"textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 125\r\n\r\n {"result":{"capabilities":{"textDocumentSync":1},"
serverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"serverInfo":{"name":"Moonscript 
Language Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804\r'
'Saw line \r'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 14804'
'Saw line '
'Got empty line, breaking'
'14804'
{ 
  id = 0,
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1198116,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"jsonrpc":"2.0","id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line nil'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 84\r\n\r\n {\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"code\":-
32601,\"message\":\"Method 'nil' Not Found\"}}]]

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[{"message":"test","severity":1,"range":{"start":{"character":0
,"line":0},"end":{"character":4,"line":0}},"source":"test"}],"uri":"file:///c%3A
/Users/me/Downloads/test%20TEST%20test.moon"},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1261380,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"serverInfo":{"na
me":"Moonscript Language Server"},"capabilities":{"textDocumentSync":1}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"severity":1,"range":{"end":{"line":0,"c
haracter":4},"start":{"line":0,"character":0}},"source":"test","message":"test"}
]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 211'
'Saw line '
'Got empty line, breaking'
'211'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'tet TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"severity":1,"range":{"end":{"line":0,"c
haracter":4},"start":{"line":0,"character":0}},"source":"test","message":"test"}
]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'teklt TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}

[[Content-Length: 273\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"severity":1,"range":{"end":{"line":0,"c
haracter":4},"start":{"line":0,"character":0}},"source":"test","message":"test"}
]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}]]

[[Content-Length: 273\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"severity":1,"range":{"end":{"line":0,"c
haracter":4},"start":{"line":0,"character":0}},"source":"test","message":"test"}
]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1286436,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"error\":{\"code\":-32601,\"message\":\"Method 'ni
l' Not Found\"},\"jsonrpc\":\"2.0\",\"id\":1}]]

[[Content-Length: 273\r\n\r\n{"method":"textDocument/publishDiagnostics","jsonrp
c":"2.0","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"source":"test","message":"test","severity":1,"range":{"end":
{"line":0,"character":4},"start":{"line":0,"character":0}}}]}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1283104,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"diagnostics":[],"uri":"file:///c%3A/Users/me/Downloads/test%
20TEST%20test.moon"}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\na' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"diagnostics":[],"uri":"file:///c%3A/Users/me/Downloads/test%
20TEST%20test.moon"}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 214'
'Saw line '
'Got empty line, breaking'
'214'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\na$' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}
'Sending response'

[[Content-Length: 307\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"diagnostics":[{"source":"test","message":"Error: Failed to p
arse:\\n [3] >>    a$","severity":1,"range":{"start":{"line":0,"character":0},"e
nd":{"line":0,"character":4}}}],"uri":"file:///c%3A/Users/me/Downloads/test%20TE
ST%20test.moon"}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\na' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"diagnostics":[],"uri":"file:///c%3A/Users/me/Downloads/test%
20TEST%20test.moon"}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 214'
'Saw line '
'Got empty line, breaking'
'214'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\na$' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}
'Sending response'

[[Content-Length: 307\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"diagnostics":[{"source":"test","message":"Error: Failed to p
arse:\\n [3] >>    a$","severity":1,"range":{"start":{"line":0,"character":0},"e
nd":{"line":0,"character":4}}}],"uri":"file:///c%3A/Users/me/Downloads/test%20TE
ST%20test.moon"}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\na' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 6 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"diagnostics":[],"uri":"file:///c%3A/Users/me/Downloads/test%
20TEST%20test.moon"}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 214'
'Saw line '
'Got empty line, breaking'
'214'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\na@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 7 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"diagnostics":[],"uri":"file:///c%3A/Users/me/Downloads/test%
20TEST%20test.moon"}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\na' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 8 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"diagnostics":[],"uri":"file:///c%3A/Users/me/Downloads/test%
20TEST%20test.moon"}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"code\":-3
2601,\"message\":\"Method 'nil' Not Found\"}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289316,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 212'
'Saw line '
'Got empty line, breaking'
'212'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 212'
'Saw line '
'Got empty line, breaking'
'212'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n3' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 6 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 214'
'Saw line '
'Got empty line, breaking'
'214'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n3#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 7 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n3' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 8 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 214'
'Saw line '
'Got empty line, breaking'
'214'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n3$' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 9 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 217'
'Saw line '
'Got empty line, breaking'
'217'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n3$#!' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 11 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 218'
'Saw line '
'Got empty line, breaking'
'218'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n3$#!@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 12 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 220'
'Saw line '
'Got empty line, breaking'
'220'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf@!\r\n3$#!@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 14 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 224'
'Saw line '
'Got empty line, breaking'
'224'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf@!\r\n3$#!@\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 15 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289532,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289532,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289532,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289532,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289532,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1273084,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1273084,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1273084,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1273084,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1273084,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289628,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289628,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289628,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289628,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1289628,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1290268,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1290268,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1290268,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1290268,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1290268,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1291356,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1291356,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n#',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1291356,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n#',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1291356,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n#',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1291356,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n#',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1291088,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"diagnostics":[],"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.mo
on"},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1291088,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n$',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1291088,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n$',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1291088,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n$',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1291088,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n$',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1279436,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 214'
'Saw line '
'Got empty line, breaking'
'214'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$!' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$!@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$!@@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 217'
'Saw line '
'Got empty line, breaking'
'217'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$!@@@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 6 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$!@@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 7 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$!@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 8 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 214'
'Saw line '
'Got empty line, breaking'
'214'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$!' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 9 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 214'
'Saw line '
'Got empty line, breaking'
'214'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n$' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 10 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 11 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 214'
'Saw line '
'Got empty line, breaking'
'214'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n1' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 12 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n1@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 13 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n1@ ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 14 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 216'
'Saw line '
'Got empty line, breaking'
'216'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n1 =' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 18 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 217'
'Saw line '
'Got empty line, breaking'
'217'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n1 = ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 19 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 218'
'Saw line '
'Got empty line, breaking'
'218'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n1 = f' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 20 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 213'
'Saw line '
'Got empty line, breaking'
'213'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 25 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 27 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 217'
'Saw line '
'Got empty line, breaking'
'217'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 29 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 218'
'Saw line '
'Got empty line, breaking'
'218'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 30 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 219'
'Saw line '
'Got empty line, breaking'
'219'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 31 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 218'
'Saw line '
'Got empty line, breaking'
'218'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 32 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 220'
'Saw line '
'Got empty line, breaking'
'220'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 123' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 34 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 221'
'Saw line '
'Got empty line, breaking'
'221'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1234' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 35 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 222'
'Saw line '
'Got empty line, breaking'
'222'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1234;' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 36 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 218'
'Saw line '
'Got empty line, breaking'
'218'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 37 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 219'
'Saw line '
'Got empty line, breaking'
'219'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 38 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 223'
'Saw line '
'Got empty line, breaking'
'223'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 42 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 224'
'Saw line '
'Got empty line, breaking'
'224'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 43 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 225'
'Saw line '
'Got empty line, breaking'
'225'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3 ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 44 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 226'
'Saw line '
'Got empty line, breaking'
'226'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3 +' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 45 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 227'
'Saw line '
'Got empty line, breaking'
'227'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3 + ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 46 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 228'
'Saw line '
'Got empty line, breaking'
'228'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3 + 1' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 47 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 227'
'Saw line '
'Got empty line, breaking'
'227'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3 + ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 48 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 226'
'Saw line '
'Got empty line, breaking'
'226'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3 +' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 49 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":2,"line":2},"start":{"character":2,"line":2}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 224'
'Saw line '
'Got empty line, breaking'
'224'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 51 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 236'
'Saw line '
'Got empty line, breaking'
'236'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 54 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 237'
'Saw line '
'Got empty line, breaking'
'237'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\ne\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 55 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 56 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 239'
'Saw line '
'Got empty line, breaking'
'239'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 57 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 240'
'Saw line '
'Got empty line, breaking'
'240'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE#3\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 58 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 241'
'Saw line '
'Got empty line, breaking'
'241'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 59 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 242'
'Saw line '
'Got empty line, breaking'
'242'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE#3#3\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 60 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 243'
'Saw line '
'Got empty line, breaking'
'243'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 61 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 244'
'Saw line '
'Got empty line, breaking'
'244'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE#3#3#3\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 62 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 245'
'Saw line '
'Got empty line, breaking'
'245'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE#3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 63 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 246'
'Saw line '
'Got empty line, breaking'
'246'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE##3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 64 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 244'
'Saw line '
'Got empty line, breaking'
'244'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 66 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 245'
'Saw line '
'Got empty line, breaking'
'245'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE33#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 67 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 246'
'Saw line '
'Got empty line, breaking'
'246'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE333#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 68 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 245'
'Saw line '
'Got empty line, breaking'
'245'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE33#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 69 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 244'
'Saw line '
'Got empty line, breaking'
'244'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 70 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 245'
'Saw line '
'Got empty line, breaking'
'245'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE33#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 71 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 246'
'Saw line '
'Got empty line, breaking'
'246'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE333#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 72 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 247'
'Saw line '
'Got empty line, breaking'
'247'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neE33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 73 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 248'
'Saw line '
'Got empty line, breaking'
'248'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neEe33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 74 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 249'
'Saw line '
'Got empty line, breaking'
'249'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neEee33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 75 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 250'
'Saw line '
'Got empty line, breaking'
'250'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neEeee33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 76 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 254'
'Saw line '
'Got empty line, breaking'
'254'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neEeee33c3#3#3#\r\n\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 77 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 250'
'Saw line '
'Got empty line, breaking'
'250'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\neEeee33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 78 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":4,"line":4},"start":{"character":4,"line":4}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 254'
'Saw line '
'Got empty line, breaking'
'254'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\neEeee33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 79 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":5,"line":5},"start":{"character":5,"line":5}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 258'
'Saw line '
'Got empty line, breaking'
'258'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\n\r\neEeee33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 80 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":6,"line":6},"start":{"character":6,"line":6}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 262'
'Saw line '
'Got empty line, breaking'
'262'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\n\r\n\r\neEeee33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 81 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":7,"line":7},"start":{"character":7,"line":7}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 266'
'Saw line '
'Got empty line, breaking'
'266'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\n\r\n\r\n\r\neEeee33c3#3#3#\r\
        n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 82 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":8,"line":8},"start":{"character":8,"line":8}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 270'
'Saw line '
'Got empty line, breaking'
'270'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\n\r\n\r\n\r\n\r\neEeee33c3#3#3
        #\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 83 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":9,"line":9},"start":{"character":9,"line":9}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 274'
'Saw line '
'Got empty line, breaking'
'274'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\neEeee33c3
        #3#3#\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 84 
    } 
  } 
}
'Sending response'

[[Content-Length: 283\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":10,"line":10},"start":{"character":10,"line":10}},"sourc
e":"test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 270'
'Saw line '
'Got empty line, breaking'
'270'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\n\r\n\r\n\r\n\r\neEeee33c3#3#3
        #\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 85 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":9,"line":9},"start":{"character":9,"line":9}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 266'
'Saw line '
'Got empty line, breaking'
'266'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\n\r\n\r\n\r\neEeee33c3#3#3#\r\
        n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 86 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":8,"line":8},"start":{"character":8,"line":8}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 262'
'Saw line '
'Got empty line, breaking'
'262'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\n\r\n\r\neEeee33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 87 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":7,"line":7},"start":{"character":7,"line":7}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 258'
'Saw line '
'Got empty line, breaking'
'258'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\n\r\neEeee33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 88 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":6,"line":6},"start":{"character":6,"line":6}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 254'
'Saw line '
'Got empty line, breaking'
'254'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\nf = 1 and 3\r\n\r\n\r\neEeee33c3#3#3#\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 89 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":5,"line":5},"start":{"character":5,"line":5}},"source":"
test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"error\":{\"message\":\"Method 'nil' Not Found\",\
"code\":-32601},\"id\":1,\"jsonrpc\":\"2.0\"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1290684,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 215'
'Saw line '
'Got empty line, breaking'
'215'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf\r\n',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 220'
'Saw line '
'Got empty line, breaking'
'220'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 221'
'Saw line '
'Got empty line, breaking'
'221'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\na\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 222'
'Saw line '
'Got empty line, breaking'
'222'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\na \r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 223'
'Saw line '
'Got empty line, breaking'
'223'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\na =\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 6 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 224'
'Saw line '
'Got empty line, breaking'
'224'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\na = \r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 7 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 225'
'Saw line '
'Got empty line, breaking'
'225'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\na = 2\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 8 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 226'
'Saw line '
'Got empty line, breaking'
'226'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\na = 2 \r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 9 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 228'
'Saw line '
'Got empty line, breaking'
'228'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\na = 2 +\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 10 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 229'
'Saw line '
'Got empty line, breaking'
'229'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\na = 2 + \r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 11 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 230'
'Saw line '
'Got empty line, breaking'
'230'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\na = 2 + 3\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 12 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 234'
'Saw line '
'Got empty line, breaking'
'234'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + 3\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 13 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 235'
'Saw line '
'Got empty line, breaking'
'235'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + 3 \r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 14 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 236'
'Saw line '
'Got empty line, breaking'
'236'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + 3 &\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 15 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":4},"end":{"character":
1,"line":4}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 235'
'Saw line '
'Got empty line, breaking'
'235'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + 3 \r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 16 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 234'
'Saw line '
'Got empty line, breaking'
'234'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + 3\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 17 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 233'
'Saw line '
'Got empty line, breaking'
'233'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + \r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 18 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":4},"end":{"character":
1,"line":4}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 234'
'Saw line '
'Got empty line, breaking'
'234'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 19 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 235'
'Saw line '
'Got empty line, breaking'
'235'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + f \r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 20 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 236'
'Saw line '
'Got empty line, breaking'
'236'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + f 3\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 21 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 236'
'Saw line '
'Got empty line, breaking'
'236'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + f #\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 23 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":4},"end":{"character":
1,"line":4}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 235'
'Saw line '
'Got empty line, breaking'
'235'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + f \r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 24 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 234'
'Saw line '
'Got empty line, breaking'
'234'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 25 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 237'
'Saw line '
'Got empty line, breaking'
'237'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na    = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 26 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 236'
'Saw line '
'Got empty line, breaking'
'236'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na   = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 27 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 235'
'Saw line '
'Got empty line, breaking'
'235'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na  = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 28 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 234'
'Saw line '
'Got empty line, breaking'
'234'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\na = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 29 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\n    a = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 30 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":5,"line":4},"end":{"character":
5,"line":4}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 242'
'Saw line '
'Got empty line, breaking'
'242'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\n        a = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 31 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":9,"line":4},"end":{"character":
9,"line":4}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n\r\n\r\n    a = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 32 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":5,"line":4},"end":{"character":
5,"line":4}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 230'
'Saw line '
'Got empty line, breaking'
'230'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf\r\n    a = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 34 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":5,"line":2},"end":{"character":
5,"line":2}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 232'
'Saw line '
'Got empty line, breaking'
'232'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf =\r\n    a = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 36 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":5,"line":2},"end":{"character":
5,"line":2}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 234'
'Saw line '
'Got empty line, breaking'
'234'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = -\r\n    a = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 38 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":1},"end":{"character":
1,"line":1}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 235'
'Saw line '
'Got empty line, breaking'
'235'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 39 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 236'
'Saw line '
'Got empty line, breaking'
'236'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 40 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 237'
'Saw line '
'Got empty line, breaking'
'237'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 41 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 236'
'Saw line '
'Got empty line, breaking'
'236'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 42 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 237'
'Saw line '
'Got empty line, breaking'
'237'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 43 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 236'
'Saw line '
'Got empty line, breaking'
'236'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 44 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 237'
'Saw line '
'Got empty line, breaking'
'237'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 45 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 243'
'Saw line '
'Got empty line, breaking'
'243'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#######' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 51 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 244'
'Saw line '
'Got empty line, breaking'
'244'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#######2' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 52 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 245'
'Saw line '
'Got empty line, breaking'
'245'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#######2#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 53 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 246'
'Saw line '
'Got empty line, breaking'
'246'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#######2#@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 54 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 248'
'Saw line '
'Got empty line, breaking'
'248'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#######2#@@#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 56 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 247'
'Saw line '
'Got empty line, breaking'
'247'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#######2#@@' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 57 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 245'
'Saw line '
'Got empty line, breaking'
'245'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#######2#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 59 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 244'
'Saw line '
'Got empty line, breaking'
'244'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#######2' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 60 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 243'
'Saw line '
'Got empty line, breaking'
'243'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#######' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 61 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 242'
'Saw line '
'Got empty line, breaking'
'242'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf######' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 62 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"start":{"character":1,"line":3},"end":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 236'
'Saw line '
'Got empty line, breaking'
'236'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 68 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 235'
'Saw line '
'Got empty line, breaking'
'235'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 69 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"code\":-3
2601,\"message\":\"Method 'nil' Not Found\"}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1293468,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1293468,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1293468,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1293468,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1293468,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1296260,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"capabilities":{"textDocumentSync":1},"s
erverInfo":{"name":"Moonscript Language Server"}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf',
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 236'
'Saw line '
'Got empty line, breaking'
'236'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":3},"start":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#Z!' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 239'
'Saw line '
'Got empty line, breaking'
'239'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#Z!#' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":3},"start":{"character":
1,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 238'
'Saw line '
'Got empty line, breaking'
'238'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\nf#Z!' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 6 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 242'
'Saw line '
'Got empty line, breaking'
'242'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n    f#Z!' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 7 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 246'
'Saw line '
'Got empty line, breaking'
'246'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n        f#Z!' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 8 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":9,"line":3},"start":{"character":
9,"line":3}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 242'
'Saw line '
'Got empty line, breaking'
'242'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n    f#Z!' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 9 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 235'
'Saw line '
'Got empty line, breaking'
'235'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 10 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 239'
'Saw line '
'Got empty line, breaking'
'239'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n    ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 11 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 235'
'Saw line '
'Got empty line, breaking'
'235'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 12 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 231'
'Saw line '
'Got empty line, breaking'
'231'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 13 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 239'
'Saw line '
'Got empty line, breaking'
'239'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n    ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 14 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 243'
'Saw line '
'Got empty line, breaking'
'243'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\n    ' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 15 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 239'
'Saw line '
'Got empty line, breaking'
'239'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 16 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 240'
'Saw line '
'Got empty line, breaking'
'240'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nH' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 17 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 250'
'Saw line '
'Got empty line, breaking'
'250'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello world' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 27 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 251'
'Saw line '
'Got empty line, breaking'
'251'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello world!' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 28 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 252'
'Saw line '
'Got empty line, breaking'
'252'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world!' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 29 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 256'
'Saw line '
'Got empty line, breaking'
'256'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world!\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 30 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 260'
'Saw line '
'Got empty line, breaking'
'260'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world!\r\n\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 31 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 256'
'Saw line '
'Got empty line, breaking'
'256'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world!\r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 32 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 257'
'Saw line '
'Got empty line, breaking'
'257'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 'test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! \r\n' 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 33 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 269'
'Saw line '
'Got empty line, breaking'
'269'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        \r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 45 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 271'
'Saw line '
'Got empty line, breaking'
'271'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        to\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 47 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 274'
'Saw line '
'Got empty line, breaking'
'274'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 50 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 275'
'Saw line '
'Got empty line, breaking'
'275'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today?\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 51 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":4},"start":{"character":
1,"line":4}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 274'
'Saw line '
'Got empty line, breaking'
'274'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 52 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 276'
'Saw line '
'Got empty line, breaking'
'276'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today??\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 54 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":4},"start":{"character":
1,"line":4}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 274'
'Saw line '
'Got empty line, breaking'
'274'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 56 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1767'
'Saw line '
'Got empty line, breaking'
'1767'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad . My Grown Up Chinese Se
        lf THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , Wyh
        ichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up
         Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get
         Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bod
        y Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT
         Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Sel
        f Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome K
        Ey Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because M
        y Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Ex
        pensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And O
        ther Various Banned Players Who Would Be A Very High Rank If They Weren't Banned
        , Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Comb
        o Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Self
         Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Read 
        Flash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Self
         HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self Ge
        t A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 59 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":6},"start":{"character":
1,"line":6}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1766'
'Saw line '
'Got empty line, breaking'
'1766'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad. My Grown Up Chinese Sel
        f THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , Wyhi
        chj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up 
        Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get 
        Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body
         Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT 
        Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self
         Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KE
        y Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My
         Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Exp
        ensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Ot
        her Various Banned Players Who Would Be A Very High Rank If They Weren't Banned,
         Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Combo
         Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Self 
        Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Read F
        lash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Self 
        HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self Get
         A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 60 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":6},"start":{"character":
1,"line":6}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1765'
'Saw line '
'Got empty line, breaking'
'1765'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , Wyhic
        hj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up C
        hinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get A
        ccuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body 
        Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT I
        s Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self 
        Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KEy
         Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My 
        Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Expe
        nsive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Oth
        er Various Banned Players Who Would Be A Very High Rank If They Weren't Banned, 
        Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Combo 
        Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Self C
        an Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Read Fl
        ash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Self H
        Ave To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self Get 
        A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 61 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":6},"start":{"character":
1,"line":6}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1764'
'Saw line '
'Got empty line, breaking'
'1764'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , Wyhic
        hj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up C
        hinese Self Dont Get Very Good Accuracy On Them. My Grown Up Chinese Self Get Ac
        curacy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body E
        lse Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT Is
         Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self D
        eserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KEy 
        Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My G
        rown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Expen
        sive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Othe
        r Various Banned Players Who Would Be A Very High Rank If They Weren't Banned, R
        equire To Play The Video Game Properly. Also, IAm Very Fast And Can Full Combo P
        hoto Material With Lots Of Speed Modifications, Also My Grown Up Chinese Self Ca
        n Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Read Fla
        sh Light With No Full Area, Only A Black Circle That My Grown Up Chinese Self HA
        ve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self Get A
         Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 62 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":6},"start":{"character":
1,"line":6}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1765'
'Saw line '
'Got empty line, breaking'
'1765'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , Wyhic
        hj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up C
        hinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get A
        ccuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body 
        Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT I
        s Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self 
        Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KEy
         Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My 
        Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Expe
        nsive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Oth
        er Various Banned Players Who Would Be A Very High Rank If They Weren't Banned, 
        Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Combo 
        Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Self C
        an Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Read Fl
        ash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Self H
        Ave To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self Get 
        A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 63 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":6},"start":{"character":
1,"line":6}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1769'
'Saw line '
'Got empty line, breaking'
'1769'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.\r\nMy Grown Up Chinese 
        Self THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , W
        yhichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown 
        Up Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self G
        et Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some B
        ody Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But 
        IT Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese S
        elf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome
         KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because
         My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced 
        Expensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And
         Other Various Banned Players Who Would Be A Very High Rank If They Weren't Bann
        ed, Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Co
        mbo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Se
        lf Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Rea
        d Flash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Se
        lf HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self 
        Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 64 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":6},"start":{"character":
1,"line":6}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1765'
'Saw line '
'Got empty line, breaking'
'1765'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , Wyhic
        hj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up C
        hinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get A
        ccuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body 
        Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT I
        s Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self 
        Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KEy
         Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My 
        Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Expe
        nsive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Oth
        er Various Banned Players Who Would Be A Very High Rank If They Weren't Banned, 
        Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Combo 
        Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Self C
        an Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Read Fl
        ash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Self H
        Ave To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self Get 
        A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 65 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":6},"start":{"character":
1,"line":6}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1769'
'Saw line '
'Got empty line, breaking'
'1769'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My\r\n Grown Up Chinese 
        Self THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , W
        yhichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown 
        Up Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self G
        et Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some B
        ody Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But 
        IT Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese S
        elf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome
         KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because
         My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced 
        Expensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And
         Other Various Banned Players Who Would Be A Very High Rank If They Weren't Bann
        ed, Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Co
        mbo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Se
        lf Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Rea
        d Flash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Se
        lf HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self 
        Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 66 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":2,"line":7},"start":{"character":
2,"line":7}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1768'
'Saw line '
'Got empty line, breaking'
'1768'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My\r\nGrown Up Chinese S
        elf THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , Wy
        hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
        p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
        t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
        dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
        T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
        lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
        KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
        My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
        xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
        Other Various Banned Players Who Would Be A Very High Rank If They Weren't Banne
        d, Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Com
        bo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Sel
        f Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Read
         Flash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Sel
        f HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self G
        et A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 67 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":7},"start":{"character":
1,"line":7}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1769'
'Saw line '
'Got empty line, breaking'
'1769'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My\r\n Grown Up Chinese 
        Self THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , W
        yhichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown 
        Up Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self G
        et Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some B
        ody Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But 
        IT Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese S
        elf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome
         KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because
         My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced 
        Expensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And
         Other Various Banned Players Who Would Be A Very High Rank If They Weren't Bann
        ed, Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Co
        mbo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Se
        lf Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Rea
        d Flash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Se
        lf HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self 
        Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 68 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":2,"line":7},"start":{"character":
2,"line":7}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1765'
'Saw line '
'Got empty line, breaking'
'1765'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , Wyhic
        hj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up C
        hinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get A
        ccuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body 
        Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT I
        s Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self 
        Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KEy
         Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My 
        Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Expe
        nsive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Oth
        er Various Banned Players Who Would Be A Very High Rank If They Weren't Banned, 
        Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Combo 
        Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Self C
        an Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Read Fl
        ash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Self H
        Ave To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self Get 
        A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 69 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":6},"start":{"character":
1,"line":6}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1767'
'Saw line '
'Got empty line, breaking'
'1767'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer , Wyh
        ichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up
         Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get
         Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bod
        y Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT
         Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Sel
        f Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome K
        Ey Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because M
        y Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Ex
        pensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And O
        ther Various Banned Players Who Would Be A Very High Rank If They Weren't Banned
        , Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Comb
        o Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Self
         Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Read 
        Flash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Self
         HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self Ge
        t A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 72 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":7},"start":{"character":
1,"line":7}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1769'
'Saw line '
'Got empty line, breaking'
'1769'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\n W
        yhichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown 
        Up Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self G
        et Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some B
        ody Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But 
        IT Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese S
        elf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome
         KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because
         My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced 
        Expensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And
         Other Various Banned Players Who Would Be A Very High Rank If They Weren't Bann
        ed, Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Co
        mbo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Se
        lf Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Rea
        d Flash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Se
        lf HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self 
        Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 75 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":2,"line":8},"start":{"character":
2,"line":8}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1768'
'Saw line '
'Got empty line, breaking'
'1768'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
        hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
        p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
        t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
        dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
        T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
        lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
        KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
        My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
        xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
        Other Various Banned Players Who Would Be A Very High Rank If They Weren't Banne
        d, Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Com
        bo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Sel
        f Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Read
         Flash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Sel
        f HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self G
        et A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 76 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":8},"start":{"character":
1,"line":8}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1769'
'Saw line '
'Got empty line, breaking'
'1769'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
        hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
        p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
        t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
        dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
        T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
        lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
        KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
        My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
        xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
        Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Bann
        ed, Require To Play The Video Game Properly. Also, IAm Very Fast And Can Full Co
        mbo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese Se
        lf Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can Rea
        d Flash Light With No Full Area, Only A Black Circle That My Grown Up Chinese Se
        lf HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Self 
        Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 77 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":8},"start":{"character":
1,"line":8}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1771'
'Saw line '
'Got empty line, breaking'
'1771'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
        hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
        p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
        t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
        dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
        T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
        lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
        KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
        My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
        xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
        Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Bann
        ed\r\nRequire To Play The Video Game Properly. Also, IAm Very Fast And Can Full 
        Combo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chinese 
        Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can R
        ead Flash Light With No Full Area, Only A Black Circle That My Grown Up Chinese 
        Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese Sel
        f Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 80 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":9},"start":{"character":
1,"line":9}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1773'
'Saw line '
'Got empty line, breaking'
'1773'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
        hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
        p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
        t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
        dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
        T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
        lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
        KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
        My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
        xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
        Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Bann
        ed\r\nRequire To Play The Video Game Properly. Also\r\nIAm Very Fast And Can Ful
        l Combo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chines
        e Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can
         Read Flash Light With No Full Area, Only A Black Circle That My Grown Up Chines
        e Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese S
        elf Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 83 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":9},"start":{"character":
1,"line":9}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1774'
'Saw line '
'Got empty line, breaking'
'1774'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
        hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
        p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
        t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
        dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
        T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
        lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
        KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
        My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
        xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
        Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Bann
        ed\r\nRequire To Play The Video Game Properly . Also\r\nIAm Very Fast And Can Fu
        ll Combo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chine
        se Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Ca
        n Read Flash Light With No Full Area, Only A Black Circle That My Grown Up Chine
        se Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese 
        Self Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 84 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"jsonrpc":"2.0","method":"textDocument/publishDiag
nostics","params":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moo
n","diagnostics":[{"range":{"end":{"character":1,"line":9},"start":{"character":
1,"line":9}},"message":"Error: nil","source":"test","severity":1}]}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1773'
'Saw line '
'Got empty line, breaking'
'1773'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
        hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
        p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
        t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
        dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
        T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
        lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
        KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
        My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
        xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
        Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Bann
        ed\r\nRequire To Play The Video Game Properly  Also\r\nIAm Very Fast And Can Ful
        l Combo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chines
        e Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can
         Read Flash Light With No Full Area, Only A Black Circle That My Grown Up Chines
        e Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese S
        elf Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 85 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1296260,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"result":{"capabilities":{"textDocumentSync
":1},"serverInfo":{"name":"Moonscript Language Server"}},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1776'
'Saw line '
'Got empty line, breaking'
'1776'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
      today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
      elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
       THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
      hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
      p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
      t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
      dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
      T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
      lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
      KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
      My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
      xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
      Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Bann
      ed\r\nRequire To Play The Video Game Properly  Also\r\nIAm Very Fast And Can Ful
      l Combo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chines
      e Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can
       Read Flash Light With No Full Area, Only A Black Circle That My Grown Up Chines
      e Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese S
      elf Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 85 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1296260,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1776'
'Saw line '
'Got empty line, breaking'
'1776'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
      today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
      elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
       THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
      hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
      p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
      t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
      dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
      T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
      lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
      KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
      My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
      xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
      Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Bann
      ed\r\nRequire To Play The Video Game Properly  Also\r\nIAm Very Fast And Can Ful
      l Combo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chines
      e Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can
       Read Flash Light With No Full Area, Only A Black Circle That My Grown Up Chines
      e Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese S
      elf Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 85 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1296260,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1776'
'Saw line '
'Got empty line, breaking'
'1776'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
      today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
      elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
       THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
      hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
      p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
      t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
      dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
      T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
      lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
      KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
      My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
      xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
      Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Bann
      ed\r\nRequire To Play The Video Game Properly  Also\r\nIAm Very Fast And Can Ful
      l Combo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chines
      e Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can
       Read Flash Light With No Full Area, Only A Black Circle That My Grown Up Chines
      e Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese S
      elf Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 85 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1296260,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1776'
'Saw line '
'Got empty line, breaking'
'1776'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
      today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
      elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
       THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
      hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
      p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
      t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
      dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
      T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
      lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
      KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
      My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
      xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
      Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Bann
      ed\r\nRequire To Play The Video Game Properly  Also\r\nIAm Very Fast And Can Ful
      l Combo Photo Material With Lots Of Speed Modifications, Also My Grown Up Chines
      e Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can
       Read Flash Light With No Full Area, Only A Black Circle That My Grown Up Chines
      e Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese S
      elf Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 85 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1294660,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1779'
'Saw line '
'Got empty line, breaking'
'1779'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
      today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
      elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
       THink\r\nIt Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWy
      hichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown U
      p Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Ge
      t Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Bo
      dy Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But I
      T Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Se
      lf Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome 
      KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because 
      My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced E
      xpensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And 
      Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Bann
      ed\r\nRequire To Play The Video Game Properly.Also\r\nIAm Very Fast And Can Full
       Combo Photo Material With Lots Of Speed Modifications\r\nAlso My Grown Up Chine
      se Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Ca
      n Read Flash Light With No Full Area\r\nOnly A Black Circle That My Grown Up Chi
      nese Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chines
      e Self Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 98 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1779'
'Saw line '
'Got empty line, breaking'
'1779'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink\r\n, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\n
        Wyhichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown
         Up Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self 
        Get Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some 
        Body Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But
         IT Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese 
        Self Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dom
        e KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Becaus
        e My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced
         Expensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, An
        d Other Various Banned Players Who Would Be A Very High Rank If They Weren' t Ba
        nned\r\nRequire To Play The Video Game Properly.Also\r\nIAm Very Fast And Can Fu
        ll Combo Photo Material With Lots Of Speed Modifications\r\nAlso My Grown Up Chi
        nese Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self 
        Can Read Flash Light With No Full Area\r\nOnly A Black Circle That My Grown Up C
        hinese Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chin
        ese Self Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 100 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"range":{"end":{"character":1,"line":7},
"start":{"character":1,"line":7}},"source":"test","message":"Error: nil","severi
ty":1}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1780'
'Saw line '
'Got empty line, breaking'
'1780'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink\r\n , It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\
        nWyhichj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grow
        n Up Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self
         Get Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some
         Body Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, Bu
        t IT Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese
         Self Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Do
        me KEy Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Becau
        se My Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advance
        d Expensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, A
        nd Other Various Banned Players Who Would Be A Very High Rank If They Weren' t B
        anned\r\nRequire To Play The Video Game Properly.Also\r\nIAm Very Fast And Can F
        ull Combo Photo Material With Lots Of Speed Modifications\r\nAlso My Grown Up Ch
        inese Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self
         Can Read Flash Light With No Full Area\r\nOnly A Black Circle That My Grown Up 
        Chinese Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chi
        nese Self Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 101 
    } 
  } 
}
'Sending response'

[[Content-Length: 279\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"range":{"end":{"character":2,"line":7},
"start":{"character":2,"line":7}},"source":"test","message":"Error: nil","severi
ty":1}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1775'
'Saw line '
'Got empty line, breaking'
'1775'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
        today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
        elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
         THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWyhi
        chj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up 
        Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get 
        Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body
         Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT 
        Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self
         Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KE
        y Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My
         Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Exp
        ensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Ot
        her Various Banned Players Who Would Be A Very High Rank If They Weren' t Banned
        \r\nRequire To Play The Video Game Properly.Also\r\nIAm Very Fast And Can Full C
        ombo Photo Material With Lots Of Speed Modifications\r\nAlso My Grown Up Chinese
         Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can 
        Read Flash Light With No Full Area\r\nOnly A Black Circle That My Grown Up Chine
        se Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese 
        Self Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 103 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1294660,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1778'
'Saw line '
'Got empty line, breaking'
'1778'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
      today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
      elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
       THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWyhi
      chj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up 
      Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get 
      Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body
       Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT 
      Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self
       Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KE
      y Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My
       Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Exp
      ensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Ot
      her Various Banned Players Who Would Be A Very High Rank If They Weren' t Banned
      \r\nRequire To Play The Video Game Properly.Also\r\nIAm Very Fast And Can Full C
      ombo Photo Material With Lots Of Speed Modifications\r\nAlso My Grown Up Chinese
       Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can 
      Read Flash Light With No Full Area\r\nOnly A Black Circle That My Grown Up Chine
      se Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese 
      Self Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 103 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1294660,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"result":{"serverInfo":{"name":"Moonscript Languag
e Server"},"capabilities":{"textDocumentSync":1}},"id":0,"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1778'
'Saw line '
'Got empty line, breaking'
'1778'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
      today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
      elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
       THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWyhi
      chj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up 
      Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get 
      Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body
       Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT 
      Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self
       Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KE
      y Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My
       Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Exp
      ensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Ot
      her Various Banned Players Who Would Be A Very High Rank If They Weren' t Banned
      \r\nRequire To Play The Video Game Properly.Also\r\nIAm Very Fast And Can Full C
      ombo Photo Material With Lots Of Speed Modifications\r\nAlso My Grown Up Chinese
       Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can 
      Read Flash Light With No Full Area\r\nOnly A Black Circle That My Grown Up Chine
      se Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese 
      Self Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 103 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1294660,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"serverInfo":{"name":"Mo
onscript Language Server"},"capabilities":{"textDocumentSync":1}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1778'
'Saw line '
'Got empty line, breaking'
'1778'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
      today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
      elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
       THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWyhi
      chj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up 
      Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get 
      Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body
       Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT 
      Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self
       Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KE
      y Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My
       Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Exp
      ensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Ot
      her Various Banned Players Who Would Be A Very High Rank If They Weren' t Banned
      \r\nRequire To Play The Video Game Properly.Also\r\nIAm Very Fast And Can Full C
      ombo Photo Material With Lots Of Speed Modifications\r\nAlso My Grown Up Chinese
       Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can 
      Read Flash Light With No Full Area\r\nOnly A Black Circle That My Grown Up Chine
      se Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese 
      Self Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 103 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1294660,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 1778'
'Saw line '
'Got empty line, breaking'
'1778'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
      today\r\n\r\nMy Grown Up Chinese Self Is Very Not Sure Why My Grown Up Chinese S
      elf Is So Good At This Game While Everybody Else Is Bad.My Grown Up Chinese Self
       THink, It Is Because My Grown Up Chinese Self Is A Low Accuracy Pllayer\r\nWyhi
      chj Is Basiclaly Where My Grown Up Chinese Self Full Combo Maps But My Grown Up 
      Chinese Self Don't Get Very Good Accuracy On Them. My Grown Up Chinese Self Get 
      Accuracy Like 88 Per Cent, Which Menas My PP Amount Is Very Lower Than Some Body
       Else Who Gets 99 Percent Accuracy. My Accuracy Will Some TImes Be Good, But IT 
      Is Not Good Enough To Get A Very High Rank Like The One My Grown Up Chinese Self
       Deserve. Also , My Grown Up Chinese Self Play With A Mouse And A Rubber Dome KE
      y Board Which Menas My Grown Up Chinese Self AM vEry GOOd At The Game Because My
       Grown Up Chinese Self Can Play The Video Game Wiothout GEtting The Advanced Exp
      ensive Hard Ware That A Lot Of The Other Top Players, Such As Shige Tora, And Ot
      her Various Banned Players Who Would Be A Very High Rank If They Weren' t Banned
      \r\nRequire To Play The Video Game Properly.Also\r\nIAm Very Fast And Can Full C
      ombo Photo Material With Lots Of Speed Modifications\r\nAlso My Grown Up Chinese
       Self Can Read Hidden With No Approach Circles And My Grown Up Chinese Self Can 
      Read Flash Light With No Full Area\r\nOnly A Black Circle That My Grown Up Chine
      se Self HAve To Look Through And It Gets Smaller Every Time My Grown Up Chinese 
      Self Get A Minimum Of One Hundred And Another Minimum Of Two Hund\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 103 
    } 
  } 
}
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1297844,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 278'
'Saw line '
'Got empty line, breaking'
'278'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[test TEST test AA\r\nf = ->\r\n    a = 2 + f\r\n\r\nHello, world! How are you 
      today\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 104 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6073'
'Saw line '
'Got empty line, breaking'
'6073'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, :pos, :flatten_or_mark,\r\n  :is_assignable, 
        :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :sim
        ple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_string
        , :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 105 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6074'
'Saw line '
'Got empty line, breaking'
'6074'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, d:pos, :flatten_or_mark,\r\n  :is_assignable,
         :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :si
        mple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_strin
        g, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 106 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6073'
'Saw line '
'Got empty line, breaking'
'6073'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, :pos, :flatten_or_mark,\r\n  :is_assignable, 
        :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :sim
        ple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_string
        , :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 107 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6074'
'Saw line '
'Got empty line, breaking'
'6074'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, !:pos, :flatten_or_mark,\r\n  :is_assignable,
         :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :si
        mple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_strin
        g, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 108 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6073'
'Saw line '
'Got empty line, breaking'
'6073'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, :pos, :flatten_or_mark,\r\n  :is_assignable, 
        :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :sim
        ple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_string
        , :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 109 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"jsonrpc\":\"2.0\",\"id\":1,\"error\":{\"message\"
:\"Method 'nil' Not Found\",\"code\":-32601}}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1298700,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"jsonrpc":"2.0","result":{"capabilities":{"textDoc
umentSync":1},"serverInfo":{"name":"Moonscript Language Server"}},"id":0}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6076'
'Saw line '
'Got empty line, breaking'
'6076'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
       V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
      r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
       indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
      th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
      hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
      n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
      because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
      sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
      tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
      from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
      art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
      \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
      _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
      match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
          if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
      rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
      ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
         left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
         out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
      r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
      \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
            break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
      less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
      n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
      ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
      acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
      ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
       if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
      erates a debug pattern that always succeeds and prints out where we are\r\n-- in
       the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
      os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
      t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
      ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
      == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
       able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
      le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
      lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
       \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
      n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
      r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
      ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
      e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
      k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
      n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
      s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
      is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
      "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
      date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
             error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
      nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
       assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
      symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
      espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
      limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
      P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
      erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
      p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
      mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
      in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
      > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
       then the open arguments\r\n-- if there are open arguments, then append them to 
      the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
      lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
      ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
       callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
      , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
      _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
      tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
      \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
      ut, :ensure, :extract_line, :mark, :pos, :flatten_or_mark,\r\n  :is_assignable, 
      :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :sim
      ple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_string
      , :self_assign, :got, :show_line_position }\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 109 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6074'
'Saw line '
'Got empty line, breaking'
'6074'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, !:pos, :flatten_or_mark,\r\n  :is_assignable,
         :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :si
        mple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_strin
        g, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 110 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6074'
'Saw line '
'Got empty line, breaking'
'6074'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, @:pos, :flatten_or_mark,\r\n  :is_assignable,
         :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :si
        mple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_strin
        g, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 111 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[]},"jsonrpc":"2.0","method":"textDocument
/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6074'
'Saw line '
'Got empty line, breaking'
'6074'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, %:pos, :flatten_or_mark,\r\n  :is_assignable,
         :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :si
        mple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_strin
        g, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 112 
    } 
  } 
}
'Sending response'

[[Content-Length: 283\r\n\r\n{"params":{"uri":"file:///c%3A/Users/me/Downloads/t
est%20TEST%20test.moon","diagnostics":[{"message":"Error: nil","severity":1,"ran
ge":{"end":{"character":1,"line":193},"start":{"character":1,"line":193}},"sourc
e":"test"}]},"jsonrpc":"2.0","method":"textDocument/publishDiagnostics"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"error\":{\"message\":\"Method 'nil' Not Found\",\
"code\":-32601},\"id\":1,\"jsonrpc\":\"2.0\"}]]
'Waiting for packet'
'hellllooo'
'Starting Language Server'
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 5765'
'Saw line '
'Got empty line, breaking'
'5765'
{ 
  id = 0,
  jsonrpc = '2.0',
  method = 'initialize',
  params = { 
    capabilities = { 
      general = { 
        markdown = { 
          parser = 'marked',
          version = '1.1.0' 
        },
        positionEncodings = { 'utf-16' },
        regularExpressions = { 
          engine = 'ECMAScript',
          version = 'ES2020' 
        },
        staleRequestSupport = { 
          cancel = true,
          retryOnContentModified = { 'textDocument/semanticTokens/full', 
            'textDocument/semanticTokens/range', 'textDocument/semanticTokens/full/delta' } 
        } 
      },
      notebookDocument = { 
        synchronization = { 
          dynamicRegistration = true,
          executionSummarySupport = true 
        } 
      },
      textDocument = { 
        callHierarchy = { 
          dynamicRegistration = true 
        },
        codeAction = { 
          codeActionLiteralSupport = { 
            codeActionKind = { 
              valueSet = { '', 'quickfix', 'refactor', 'refactor.extract', 'refactor.inline', 
                'refactor.rewrite', 'source', 'source.organizeImports' } 
            } 
          },
          dataSupport = true,
          disabledSupport = true,
          dynamicRegistration = true,
          honorsChangeAnnotations = false,
          isPreferredSupport = true,
          resolveSupport = { 
            properties = { 'edit' } 
          } 
        },
        codeLens = { 
          dynamicRegistration = true 
        },
        colorProvider = { 
          dynamicRegistration = true 
        },
        completion = { 
          completionItem = { 
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            insertReplaceSupport = true,
            insertTextModeSupport = { 
              valueSet = { 1, 2 } 
            },
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = { 
              properties = { 'documentation', 'detail', 'additionalTextEdits' } 
            },
            snippetSupport = true,
            tagSupport = { 
              valueSet = { 1 } 
            } 
          },
          completionItemKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25 } 
          },
          completionList = { 
            itemDefaults = { 'commitCharacters', 'editRange', 'insertTextFormat', 
              'insertTextMode' } 
          },
          contextSupport = true,
          dynamicRegistration = true,
          insertTextMode = 2 
        },
        declaration = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        definition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        diagnostic = { 
          dynamicRegistration = true,
          relatedDocumentSupport = false 
        },
        documentHighlight = { 
          dynamicRegistration = true 
        },
        documentLink = { 
          dynamicRegistration = true,
          tooltipSupport = true 
        },
        documentSymbol = { 
          dynamicRegistration = true,
          hierarchicalDocumentSymbolSupport = true,
          labelSupport = true,
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        foldingRange = { 
          dynamicRegistration = true,
          foldingRange = { 
            collapsedText = false 
          },
          foldingRangeKind = { 
            valueSet = { 'comment', 'imports', 'region' } 
          },
          lineFoldingOnly = true,
          rangeLimit = 5000 
        },
        formatting = { 
          dynamicRegistration = true 
        },
        hover = { 
          contentFormat = { 'markdown', 'plaintext' },
          dynamicRegistration = true 
        },
        implementation = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        inlayHint = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'tooltip', 'textEdits', 'label.tooltip', 'label.location', 
              'label.command' } 
          } 
        },
        inlineValue = { 
          dynamicRegistration = true 
        },
        linkedEditingRange = { 
          dynamicRegistration = true 
        },
        onTypeFormatting = { 
          dynamicRegistration = true 
        },
        publishDiagnostics = { 
          codeDescriptionSupport = true,
          dataSupport = true,
          relatedInformation = true,
          tagSupport = { 
            valueSet = { 1, 2 } 
          },
          versionSupport = false 
        },
        rangeFormatting = { 
          dynamicRegistration = true 
        },
        references = { 
          dynamicRegistration = true 
        },
        rename = { 
          dynamicRegistration = true,
          honorsChangeAnnotations = true,
          prepareSupport = true,
          prepareSupportDefaultBehavior = 1 
        },
        selectionRange = { 
          dynamicRegistration = true 
        },
        semanticTokens = { 
          augmentsSyntaxTokens = true,
          dynamicRegistration = true,
          formats = { 'relative' },
          multilineTokenSupport = false,
          overlappingTokenSupport = false,
          requests = { 
            full = { 
              delta = true 
            },
            range = true 
          },
          serverCancelSupport = true,
          tokenModifiers = { 'declaration', 'definition', 'readonly', 'static', 
            'deprecated', 'abstract', 'async', 'modification', 'documentation', 
            'defaultLibrary' },
          tokenTypes = { 'namespace', 'type', 'class', 'enum', 'interface', 'struct', 
            'typeParameter', 'parameter', 'variable', 'property', 'enumMember', 'event', 
            'function', 'method', 'macro', 'keyword', 'modifier', 'comment', 'string', 
            'number', 'regexp', 'operator', 'decorator' } 
        },
        signatureHelp = { 
          contextSupport = true,
          dynamicRegistration = true,
          signatureInformation = { 
            activeParameterSupport = true,
            documentationFormat = { 'markdown', 'plaintext' },
            parameterInformation = { 
              labelOffsetSupport = true 
            } 
          } 
        },
        synchronization = { 
          didSave = true,
          dynamicRegistration = true,
          willSave = true,
          willSaveWaitUntil = true 
        },
        typeDefinition = { 
          dynamicRegistration = true,
          linkSupport = true 
        },
        typeHierarchy = { 
          dynamicRegistration = true 
        } 
      },
      window = { 
        showDocument = { 
          support = true 
        },
        showMessage = { 
          messageActionItem = { 
            additionalPropertiesSupport = true 
          } 
        },
        workDoneProgress = true 
      },
      workspace = { 
        applyEdit = true,
        codeLens = { 
          refreshSupport = true 
        },
        configuration = true,
        diagnostics = { 
          refreshSupport = true 
        },
        didChangeConfiguration = { 
          dynamicRegistration = true 
        },
        didChangeWatchedFiles = { 
          dynamicRegistration = true,
          relativePatternSupport = true 
        },
        executeCommand = { 
          dynamicRegistration = true 
        },
        fileOperations = { 
          didCreate = true,
          didDelete = true,
          didRename = true,
          dynamicRegistration = true,
          willCreate = true,
          willDelete = true,
          willRename = true 
        },
        inlayHint = { 
          refreshSupport = true 
        },
        inlineValue = { 
          refreshSupport = true 
        },
        semanticTokens = { 
          refreshSupport = true 
        },
        symbol = { 
          dynamicRegistration = true,
          resolveSupport = { 
            properties = { 'location.range' } 
          },
          symbolKind = { 
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
              20, 21, 22, 23, 24, 25, 26 } 
          },
          tagSupport = { 
            valueSet = { 1 } 
          } 
        },
        workspaceEdit = { 
          changeAnnotationSupport = { 
            groupsOnLabel = true 
          },
          documentChanges = true,
          failureHandling = 'textOnlyTransactional',
          normalizesLineEndings = true,
          resourceOperations = { 'create', 'rename', 'delete' } 
        },
        workspaceFolders = true 
      } 
    },
    clientInfo = { 
      name = 'Visual Studio Code',
      version = '1.74.2' 
    },
    locale = 'en-us',
    processId = 1300880,
    rootPath = 'c:\\Users\\me',
    rootUri = 'file:///c%3A/Users/me',
    trace = 'verbose',
    workspaceFolders = { { 
        name = 'me',
        uri = 'file:///c%3A/Users/me' 
      } } 
  } 
}
'Sending response'

[[Content-Length: 124\r\n\r\n{"id":0,"jsonrpc":"2.0","result":{"capabilities":{"
textDocumentSync":1},"serverInfo":{"name":"Moonscript Language Server"}}}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 52'
'Saw line '
'Got empty line, breaking'
'52'
{ 
  jsonrpc = '2.0',
  method = 'initialized',
  params = {} 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6075'
'Saw line '
'Got empty line, breaking'
'6075'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didOpen',
  params = { 
    textDocument = { 
      languageId = 'moonscript',
      text = 
      [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
       V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
      r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
       indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
      th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
      hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
      n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
      because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
      sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
      tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
      from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
      art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
      \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
      _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
      match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
          if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
      rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
      ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
         left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
         out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
      r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
      \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
            break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
      less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
      n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
      ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
      acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
      ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
       if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
      erates a debug pattern that always succeeds and prints out where we are\r\n-- in
       the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
      os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
      t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
      ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
      == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
       able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
      le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
      lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
       \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
      n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
      r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
      ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
      e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
      k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
      n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
      s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
      is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
      "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
      date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
             error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
      nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
       assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
      symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
      espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
      limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
      P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
      erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
      p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
      mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
      in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
      > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
       then the open arguments\r\n-- if there are open arguments, then append them to 
      the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
      lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
      ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
       callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
      , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
      _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
      tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
      \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
      ut, :ensure, :extract_line, :mark, %:pos, :flatten_or_mark,\r\n  :is_assignable,
       :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :si
      mple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_strin
      g, :self_assign, :got, :show_line_position }\r\n]],
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 1 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5134},"start":{"line":193
,"character":49}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6073'
'Saw line '
'Got empty line, breaking'
'6073'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, %:4pos, :flatten_or_mark,\r\n  :is_assignable
        , :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :s
        imple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_stri
        ng, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 2 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5134},"start":{"line":193
,"character":49}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6072'
'Saw line '
'Got empty line, breaking'
'6072'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, :4pos, :flatten_or_mark,\r\n  :is_assignable,
         :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :si
        mple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_strin
        g, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 3 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5135},"start":{"line":193
,"character":50}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6071'
'Saw line '
'Got empty line, breaking'
'6071'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, 4pos, :flatten_or_mark,\r\n  :is_assignable, 
        :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :sim
        ple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_string
        , :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 4 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5135},"start":{"line":193
,"character":50}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6072'
'Saw line '
'Got empty line, breaking'
'6072'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark,  4pos, :flatten_or_mark,\r\n  :is_assignable,
         :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :si
        mple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_strin
        g, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 5 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5136},"start":{"line":193
,"character":51}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6071'
'Saw line '
'Got empty line, breaking'
'6071'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, 4pos, :flatten_or_mark,\r\n  :is_assignable, 
        :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :sim
        ple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_string
        , :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 6 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5135},"start":{"line":193
,"character":50}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6070'
'Saw line '
'Got empty line, breaking'
'6070'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark,4pos, :flatten_or_mark,\r\n  :is_assignable, :
        check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :simp
        le_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_string,
         :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 7 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5134},"start":{"line":193
,"character":49}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6071'
'Saw line '
'Got empty line, breaking'
'6071'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, 4pos, :flatten_or_mark,\r\n  :is_assignable, 
        :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :sim
        ple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_string
        , :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 8 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5135},"start":{"line":193
,"character":50}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6072'
'Saw line '
'Got empty line, breaking'
'6072'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, 14pos, :flatten_or_mark,\r\n  :is_assignable,
         :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :si
        mple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_strin
        g, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 9 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5136},"start":{"line":193
,"character":51}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6074'
'Saw line '
'Got empty line, breaking'
'6074'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, 1 4pos, :flatten_or_mark,\r\n  :is_assignable
        , :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :s
        imple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_stri
        ng, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 10 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5136},"start":{"line":193
,"character":51}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6075'
'Saw line '
'Got empty line, breaking'
'6075'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, 1 A4pos, :flatten_or_mark,\r\n  :is_assignabl
        e, :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :
        simple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_str
        ing, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 11 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5136},"start":{"line":193
,"character":51}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6076'
'Saw line '
'Got empty line, breaking'
'6076'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, 1 A 4pos, :flatten_or_mark,\r\n  :is_assignab
        le, :check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, 
        :simple_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_st
        ring, :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 12 
    } 
  } 
}
'Sending response'

[[Content-Length: 287\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[{"severity":1,"range":{"end":{"line":193,"character":5136},"start":{"line":193
,"character":51}},"message":"Error: nil","source":"test"}]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 6071'
'Saw line '
'Got empty line, breaking'
'6071'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didChange',
  params = { 
    contentChanges = { { 
        text = 
        [[\r\nimport unpack from require \"moonscript.util\"\r\nimport P, C, S, Cp, Cmt,
         V from require \"lpeglabel\"\r\nimport ntype from require \"moonscript.types\"\
        r\nimport Space from require \"moonscript.parse.literals\"\r\n\r\n-- captures an
         indentation, returns indent depth\r\nIndent = C(S\"\\t \"^0) / (str) ->\r\n  wi
        th sum = 0\r\n    for v in str\\gmatch \"[\\t ]\"\r\n      switch v\r\n        w
        hen \" \"\r\n          sum += 1\r\n        when \"\\t\"\r\n          sum += 4\r\
        n\r\n\r\n-- causes pattern in progress to be rejected\r\n-- can't have P(false) 
        because it causes preceding patterns not to run\r\nCut = P -> false\r\n\r\n-- en
        sures finally runs regardless of whether pattern fails or passes\r\nensure = (pa
        tt, finally) ->\r\n  patt * finally + finally * Cut\r\n\r\n-- take rest of line 
        from pos out of str\r\nextract_line = (str, start_pos) ->\r\n  str = str\\sub st
        art_pos\r\n  if m = str\\match \"^(.-)\\n\"\r\n    return m\r\n\r\n  str\\match 
        \"^.-$\"\r\n\r\n-- print the line with a token showing the position\r\nshow_line
        _position = (str, pos, context=true) ->\r\n  lines = { {} }\r\n  for c in str\\g
        match \".\"\r\n    lines[#lines] or= {}\r\n    table.insert lines[#lines], c\r\n
            if c == \"\\n\"\r\n      lines[#lines + 1] = {}\r\n\r\n  for i, line in ipai
        rs lines\r\n    lines[i] = table.concat line\r\n\r\n  local out\r\n\r\n  remaini
        ng = pos - 1\r\n  for k, line in ipairs lines\r\n    if remaining < #line\r\n   
           left = line\\sub 1, remaining\r\n      right = line\\sub remaining + 1\r\n   
           out = {\r\n        \"#{left}◉#{right}\"\r\n      }\r\n\r\n      if context\
        r\n        if before = lines[k - 1]\r\n          table.insert out, 1, before\r\n
        \r\n        if after = lines[k + 1]\r\n          table.insert out, after\r\n\r\n
              break\r\n    else\r\n      remaining -= #line\r\n\r\n\r\n  return \"-\" un
        less out\r\n\r\n  out = table.concat out\r\n  (out\\gsub \"\\n*$\", \"\")\r\n\r\
        n-- used to identify a capture with a label\r\nmark = (name) ->\r\n  (...) -> {n
        ame, ...}\r\n\r\n-- wraps pattern to capture pos into node\r\n-- pos is the char
        acter offset from the buffer where the node was parsed from.\r\n-- Used to gener
        ate error messages\r\npos = (patt) ->\r\n  (Cp! * patt) / (pos, value) ->\r\n   
         if type(value) == \"table\"\r\n      value[-1] = pos\r\n    value\r\n\r\n-- gen
        erates a debug pattern that always succeeds and prints out where we are\r\n-- in
         the buffer with a label\r\ngot = (what, context=true) ->\r\n  Cmt \"\", (str, p
        os) ->\r\n    print \"++ got #{what}\", \"[#{show_line_position str, pos, contex
        t}]\"\r\n    true\r\n\r\n-- converts 1 element array to its value, otherwise mar
        ks it\r\nflatten_or_mark = (name) ->\r\n  (tbl) ->\r\n    return tbl[1] if #tbl 
        == 1\r\n    table.insert tbl, 1, name\r\n    tbl\r\n\r\n-- determines if node is
         able to be on left side of assignment\r\nis_assignable = do\r\n  chain_assignab
        le = { index: true, dot: true, slice: true }\r\n\r\n  (node) ->\r\n    return fa
        lse if node == \"...\"\r\n    switch ntype node\r\n      when \"ref\", \"self\",
         \"value\", \"self_class\", \"table\"\r\n        true\r\n      when \"chain\"\r\
        n        chain_assignable[ntype node[#node]]\r\n      else\r\n        false\r\n\
        r\ncheck_assignable = (str, pos, value) ->\r\n  if is_assignable value\r\n    tr
        ue, value\r\n  else\r\n    false\r\n\r\n-- joins the two parts of an assign pars
        e into a single node\r\nformat_assign = do\r\n  flatten_explist = flatten_or_mar
        k \"explist\"\r\n\r\n  (lhs_exps, assign) ->\r\n    unless assign\r\n      retur
        n flatten_explist lhs_exps\r\n\r\n    for assign_exp in *lhs_exps\r\n      unles
        s is_assignable assign_exp\r\n        error {assign_exp, \"left hand expression 
        is not assignable\"}\r\n\r\n    t = ntype assign\r\n    switch t\r\n      when \
        "assign\"\r\n        {\"assign\", lhs_exps, unpack assign, 2}\r\n      when \"up
        date\"\r\n        {\"update\", lhs_exps[1], unpack assign, 2}\r\n      else\r\n 
               error \"unknown assign expression: #{t}\"\r\n\r\n-- helper for if stateme
        nt, which only has single lhs\r\nformat_single_assign = (lhs, assign) ->\r\n  if
         assign\r\n    format_assign {lhs}, assign\r\n  else\r\n    lhs\r\n\r\n\r\n-- a 
        symbol\r\nsym = (chars) -> Space * chars\r\n-- a symbol that doesn't accept whit
        espace before it\r\nsymx = (chars) -> chars\r\n\r\n-- a constructor for quote de
        limited strings\r\nsimple_string = (delim, allow_interpolation) ->\r\n  inner = 
        P(\"\\\\#{delim}\") + \"\\\\\\\\\" + (1 - P delim)\r\n\r\n  inner = if allow_int
        erpolation\r\n    interp = symx'#{' * V\"Exp\" * sym'}'\r\n    (C((inner - inter
        p)^1) + interp / mark\"interpolate\")^0\r\n  else\r\n    C inner^0\r\n\r\n  C(sy
        mx(delim)) * inner * sym(delim) / mark\"string\"\r\n\r\n-- wraps a single value 
        in format needed to be passed as function arguments\r\nwrap_func_arg = (value) -
        > {\"call\", {value}}\r\n\r\n-- chains are parsed in two captures, the chain and
         then the open arguments\r\n-- if there are open arguments, then append them to 
        the end of the chain as a call\r\njoin_chain = (callee, args) ->\r\n  return cal
        lee if #args == 0\r\n  args = {\"call\", args}\r\n\r\n  if ntype(callee) == \"ch
        ain\"\r\n    table.insert callee, args\r\n    return callee\r\n\r\n  {\"chain\",
         callee, args}\r\n\r\n-- constructor for decorator node\r\nwrap_decorator = (stm
        , dec) ->\r\n  return stm unless dec\r\n  {\"decorated\", stm, dec}\r\n\r\ncheck
        _lua_string = (str, pos, right, left) ->\r\n  #left == #right\r\n\r\n-- construc
        tor for :name self assignments in table literals\r\nself_assign = (name, pos) ->
        \r\n\t{{\"key_literal\", name}, {\"ref\", name, [-1]: pos}}\r\n\r\n{ :Indent, :C
        ut, :ensure, :extract_line, :mark, pos, :flatten_or_mark,\r\n  :is_assignable, :
        check_assignable, :format_assign, :format_single_assign,\r\n  :sym, :symx, :simp
        le_string, :wrap_func_arg, :join_chain, :wrap_decorator,\r\n  :check_lua_string,
         :self_assign, :got, :show_line_position }\r\n]] 
      } },
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon',
      version = 13 
    } 
  } 
}
'Sending response'

[[Content-Length: 152\r\n\r\n{"method":"textDocument/publishDiagnostics","params
":{"uri":"file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon","diagnostics"
:[]},"jsonrpc":"2.0"}]]
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 141'
'Saw line '
'Got empty line, breaking'
'141'
{ 
  jsonrpc = '2.0',
  method = 'textDocument/didSave',
  params = { 
    textDocument = { 
      uri = 'file:///c%3A/Users/me/Downloads/test%20TEST%20test.moon' 
    } 
  } 
}
'Waiting for packet'
'hellllooo'
'Saw line Content-Length: 44'
'Saw line '
'Got empty line, breaking'
'44'
{ 
  id = 1,
  jsonrpc = '2.0',
  method = 'shutdown' 
}
'Sending response'

[[Content-Length: 83\r\n\r\n{\"id\":1,\"error\":{\"message\":\"Method 'nil' Not 
Found\",\"code\":-32601},\"jsonrpc\":\"2.0\"}]]
'Waiting for packet'
'hellllooo'
